{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nimport Router, { useRouter } from \"next/router\"; //api here is an axios instance\n\nimport api from \"../services/Api\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: toggler,\n    1: settoggler\n  } = useState(true);\n  useEffect(() => {\n    async function loadUserFromCookies() {\n      let data = false;\n      const token = Cookies.get(\"token\");\n\n      if (token) {\n        console.log(\"Got a token in the cookies, let's see if it is valid\");\n        api.defaults.headers.Authorization = `Bearer ${token}`;\n        await api.post(\"jwt-auth/v1/token/validate\").then(res => {\n          data = res;\n        }).catch(err => {\n          Cookies.remove(\"token\");\n          Cookies.remove(\"user_nicename\");\n          Cookies.remove(\"user_email\");\n          Cookies.remove(\"UserType\");\n          Cookies.remove(\"BracnhCode\");\n          Cookies.remove(\"CompanyCode\");\n          Cookies.remove(\"profile_pic\");\n          Cookies.remove(\"first_name\");\n          Cookies.remove(\"last_name\");\n          api.defaults.headers.Authorization = ``;\n          Router.push(\"/Management\");\n        }); //  const { data: data } = await api.post(\"jwt-auth/v1/token/validate\");\n\n        if (data) {\n          console.log(\"old token is valid\");\n          setUser({\n            user_nicename: Cookies.get(\"user_nicename\"),\n            user_email: Cookies.get(\"user_email\"),\n            UserType: Cookies.get(\"UserType\"),\n            CompanyCode: Cookies.get(\"CompanyCode\"),\n            BracnhCode: Cookies.get(\"BracnhCode\"),\n            profile_pic: Cookies.get(\"profile_pic\"),\n            first_name: Cookies.get(\"first_name\"),\n            last_name: Cookies.get(\"last_name\")\n          });\n        } else {}\n      }\n\n      setLoading(false);\n    }\n\n    loadUserFromCookies();\n  }, []);\n\n  const Sendcond = async phone => {\n    let tempres = await api.get(\"rabwa/getUserCode?phone=\" + phone, {});\n    return tempres;\n  };\n\n  const phoneLogin = async (phone, code) => {\n    const {\n      data: data\n    } = await api.get(\"rabwa/singUserIN?phone=\" + phone + \"&code=\" + code, {});\n\n    if (data) {\n      console.log(data);\n      console.log(\"Got new token\" + data.token);\n      Cookies.set(\"token\", data.token, {\n        expires: 60\n      });\n      Cookies.set(\"user_nicename\", data.user_nicename, {\n        expires: 60\n      });\n      Cookies.set(\"user_email\", data.user_email, {\n        expires: 60\n      });\n      Cookies.set(\"UserType\", data.UserType, {\n        expires: 60\n      });\n      Cookies.set(\"BracnhCode\", data.BracnhCode, {\n        expires: 60\n      });\n      Cookies.set(\"CompanyCode\", data.CompanyCode, {\n        expires: 60\n      });\n      Cookies.set(\"profile_pic\", data.profile_pic, {\n        expires: 60\n      });\n      Cookies.set(\"first_name\", data.first_name, {\n        expires: 60\n      });\n      Cookies.set(\"last_name\", data.last_name, {\n        expires: 60\n      });\n      api.defaults.headers.Authorization = `Bearer ${data.token}`;\n      setUser({\n        user_nicename: data.user_nicename,\n        user_email: data.user_email,\n        UserType: data.UserType,\n        CompanyCode: data.CompanyCode,\n        BracnhCode: data.BracnhCode,\n        profile_pic: data.profile_pic,\n        first_name: data.first_name,\n        last_name: data.last_name\n      });\n      console.log(\"Got user\", user);\n\n      if (data.UserType == \"Company\") {\n        Router.push(\"/CompanyStatistics\"); //return \"Company\";\n      } else if (data.UserType == \"mandobe\") {\n        // return \"Company\";\n        Router.push(\"/MyUsers\");\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const login = async (username, password) => {\n    const {\n      data: data\n    } = await api.post(\"jwt-auth/v1/token\", {\n      username,\n      password\n    });\n\n    if (data) {\n      console.log(data);\n      console.log(\"Got new token\" + data.token);\n      Cookies.set(\"token\", data.token, {\n        expires: 60\n      });\n      Cookies.set(\"user_nicename\", data.user_nicename, {\n        expires: 60\n      });\n      Cookies.set(\"user_email\", data.user_email, {\n        expires: 60\n      });\n      Cookies.set(\"UserType\", data.UserType, {\n        expires: 60\n      });\n      Cookies.set(\"BracnhCode\", data.BracnhCode, {\n        expires: 60\n      });\n      Cookies.set(\"CompanyCode\", data.CompanyCode, {\n        expires: 60\n      });\n      Cookies.set(\"profile_pic\", data.profile_pic, {\n        expires: 60\n      });\n      Cookies.set(\"first_name\", data.first_name, {\n        expires: 60\n      });\n      Cookies.set(\"last_name\", data.last_name, {\n        expires: 60\n      });\n      api.defaults.headers.Authorization = `Bearer ${data.token}`;\n      setUser({\n        user_nicename: data.user_nicename,\n        user_email: data.user_email,\n        UserType: data.UserType,\n        CompanyCode: data.CompanyCode,\n        BracnhCode: data.BracnhCode,\n        profile_pic: data.profile_pic,\n        first_name: data.first_name,\n        last_name: data.last_name\n      });\n      console.log(\"Got user\", user);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const logout = () => {\n    Cookies.remove(\"token\");\n    Cookies.remove(\"user_nicename\");\n    Cookies.remove(\"user_email\");\n    Cookies.remove(\"UserType\");\n    Cookies.remove(\"BracnhCode\");\n    Cookies.remove(\"CompanyCode\");\n    Cookies.remove(\"profile_pic\");\n    Cookies.remove(\"first_name\");\n    Cookies.remove(\"last_name\");\n    api.defaults.headers.Authorization = ``;\n    setUser(null);\n  };\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated: !!user,\n      user,\n      login,\n      logout,\n      Sendcond,\n      phoneLogin,\n      loading,\n      logout,\n      toggler,\n      settoggler\n    }\n  }, children);\n};\nexport default function useAuth() {\n  const context = useContext(AuthContext);\n  return context;\n}\nexport function ProtectRoute(Component) {\n  return () => {\n    const {\n      user,\n      isAuthenticated,\n      loading\n    } = useAuth();\n    const router = useRouter();\n    useEffect(() => {\n      if (!isAuthenticated && !loading) {\n        Router.push(\"/Management\");\n      } else if (isAuthenticated) {\n        if (user.UserType != \"admin\") Router.push(\"/\");\n      }\n    }, [loading, isAuthenticated]);\n    return __jsx(Component, arguments);\n  };\n}\nexport function ProtectRouteCompany(Component) {\n  return () => {\n    const {\n      user,\n      isAuthenticated,\n      loading\n    } = useAuth();\n    const router = useRouter();\n    useEffect(() => {\n      if (!isAuthenticated && !loading) {\n        Router.push(\"/login\");\n      } else if (isAuthenticated) {\n        if (user.UserType != \"Company\") Router.push(\"/\");\n      }\n    }, [loading, isAuthenticated]);\n    return __jsx(Component, arguments);\n  };\n}\nexport function ProtectRouteMandobe(Component) {\n  return () => {\n    const {\n      user,\n      isAuthenticated,\n      loading\n    } = useAuth();\n    const router = useRouter();\n    useEffect(() => {\n      if (!isAuthenticated && !loading) {\n        Router.push(\"/login\");\n      } else if (isAuthenticated) {\n        if (user.UserType != \"mandobe\") Router.push(\"/\");\n      }\n    }, [loading, isAuthenticated]);\n    return __jsx(Component, arguments);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
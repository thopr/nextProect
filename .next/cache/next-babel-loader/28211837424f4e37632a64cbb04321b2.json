{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\next\\\\components\\\\UserCards.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { getUserCards } from \"../services/api_get\";\nimport Skeleton from \"react-loading-skeleton\";\nimport useAuth from \"../contexts/auth.js\";\n\nfunction UserCards({\n  user_id\n}) {\n  const {\n    toggler,\n    settoggler,\n    loading\n  } = useAuth();\n  const {\n    0: spinner,\n    1: setspinner\n  } = useState(false);\n  const {\n    0: InputTypedis,\n    1: setInputTypedis\n  } = useState(false);\n  const {\n    0: InputTypecode,\n    1: setInputTypecode\n  } = useState(false);\n  const {\n    data,\n    isLoading,\n    isError\n  } = getUserCards(user_id);\n  const results = isLoading ? false : data.data;\n  console.log(results);\n  const showSkeleton = isLoading || loading;\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, results.length > 0 ? __jsx(React.Fragment, null, results.map((card, index) => {\n    var d = new Date();\n    var myd = new Date(card.end);\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      key: index,\n      class: \"card\",\n      style: {\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 23\n      }\n    }, __jsx(\"img\", {\n      class: \"card-img-top\",\n      src: card.img,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      class: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }\n    }, __jsx(\"h5\", {\n      class: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 27\n      }\n    }, card.name, \" \"), __jsx(\"p\", {\n      class: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 27\n      }\n    }, card.des), myd.getTime() >= d.getTime() ? __jsx(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      class: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }\n    }, \" \", \"\\u062A\\u0646\\u062A\\u0647\\u064A : \", card.end) : __jsx(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      class: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }\n    }, \" \", \"\\u0645\\u0646\\u062A\\u0647\\u064A\\u0629 : \", card.end))));\n  })) : __jsx(\"h1\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"\\u0644\\u0627 \\u062A\\u0648\\u062C\\u062F \\u0628\\u0637\\u0627\\u0642\\u0627\\u062A \")))), showSkeleton ? __jsx(Skeleton, {\n    height: 40,\n    count: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }) : \"\");\n}\n\nexport default UserCards;","map":{"version":3,"sources":["C:/xampp/htdocs/next/components/UserCards.js"],"names":["React","useState","getUserCards","Skeleton","useAuth","UserCards","user_id","toggler","settoggler","loading","spinner","setspinner","InputTypedis","setInputTypedis","InputTypecode","setInputTypecode","data","isLoading","isError","results","console","log","showSkeleton","length","map","card","index","d","Date","myd","end","width","img","name","des","getTime","color","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { getUserCards } from \"../services/api_get\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\n\r\nimport useAuth from \"../contexts/auth.js\";\r\n\r\nfunction UserCards({ user_id }) {\r\n  const { toggler, settoggler, loading } = useAuth();\r\n  const [spinner, setspinner] = useState(false);\r\n  const [InputTypedis, setInputTypedis] = useState(false);\r\n  const [InputTypecode, setInputTypecode] = useState(false);\r\n\r\n  const { data, isLoading, isError } = getUserCards(user_id);\r\n\r\n  const results = isLoading ? false : data.data;\r\n\r\n  console.log(results);\r\n  const showSkeleton = isLoading || loading;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            {results.length > 0 ? (\r\n              <>\r\n                {results.map((card, index) => {\r\n                  var d = new Date();\r\n                  var myd = new Date(card.end);\r\n                  return (\r\n                    <>\r\n                      <div key={index} class=\"card\" style={{ width: \"100%\" }}>\r\n                        <img class=\"card-img-top\" src={card.img} />\r\n                        <div class=\"card-body\">\r\n                          <h5 class=\"card-title\">{card.name} </h5>\r\n                          <p class=\"card-text\">{card.des}</p>\r\n                          {myd.getTime() >= d.getTime() ? (\r\n                            <p style={{ color: \"green\" }} class=\"card-text\">\r\n                              {\" \"}\r\n                              تنتهي : {card.end}\r\n                            </p>\r\n                          ) : (\r\n                            <p style={{ color: \"red\" }} class=\"card-text\">\r\n                              {\" \"}\r\n                              منتهية : {card.end}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  );\r\n                })}\r\n              </>\r\n            ) : (\r\n              <h1 style={{ textAlign: \"center\" }}>لا توجد بطاقات </h1>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {showSkeleton ? <Skeleton height={40} count={10} /> : \"\"}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserCards;\r\n"]},"metadata":{},"sourceType":"module"}